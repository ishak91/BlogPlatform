// <auto-generated />
using Blog;
using Blog.Data.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Blog.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20180208160543_CategoryUpdates1")]
    partial class CategoryUpdates1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentCategoryId");

                    b.Property<int?>("PatentCategoryId");

                    b.Property<string>("UrlSlug");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Blog.Data.Entity.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("Blog.Data.Entity.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.HasKey("Id");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Blog.Data.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int?>("CoverImageId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("Permerlink");

                    b.Property<int>("PostStatus");

                    b.Property<string>("PostTitle");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Blog.Data.Entity.Category", b =>
                {
                    b.HasOne("Blog.Data.Entity.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("Blog.Data.Entity.Post", b =>
                {
                    b.HasOne("Blog.Data.Entity.MediaFile", "CoverImage")
                        .WithMany("Posts")
                        .HasForeignKey("CoverImageId");
                });
#pragma warning restore 612, 618
        }
    }
}
